
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model StyleProfile
 * 
 */
export type StyleProfile = $Result.DefaultSelection<Prisma.$StyleProfilePayload>
/**
 * Model PageIdea
 * 
 */
export type PageIdea = $Result.DefaultSelection<Prisma.$PageIdeaPayload>
/**
 * Model PageImage
 * 
 */
export type PageImage = $Result.DefaultSelection<Prisma.$PageImagePayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.styleProfile`: Exposes CRUD operations for the **StyleProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StyleProfiles
    * const styleProfiles = await prisma.styleProfile.findMany()
    * ```
    */
  get styleProfile(): Prisma.StyleProfileDelegate<ExtArgs>;

  /**
   * `prisma.pageIdea`: Exposes CRUD operations for the **PageIdea** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageIdeas
    * const pageIdeas = await prisma.pageIdea.findMany()
    * ```
    */
  get pageIdea(): Prisma.PageIdeaDelegate<ExtArgs>;

  /**
   * `prisma.pageImage`: Exposes CRUD operations for the **PageImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageImages
    * const pageImages = await prisma.pageImage.findMany()
    * ```
    */
  get pageImage(): Prisma.PageImageDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Project: 'Project',
    StyleProfile: 'StyleProfile',
    PageIdea: 'PageIdea',
    PageImage: 'PageImage',
    Job: 'Job'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "project" | "styleProfile" | "pageIdea" | "pageImage" | "job"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      StyleProfile: {
        payload: Prisma.$StyleProfilePayload<ExtArgs>
        fields: Prisma.StyleProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StyleProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StyleProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          findFirst: {
            args: Prisma.StyleProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StyleProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          findMany: {
            args: Prisma.StyleProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>[]
          }
          create: {
            args: Prisma.StyleProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          createMany: {
            args: Prisma.StyleProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StyleProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>[]
          }
          delete: {
            args: Prisma.StyleProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          update: {
            args: Prisma.StyleProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          deleteMany: {
            args: Prisma.StyleProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StyleProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StyleProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StyleProfilePayload>
          }
          aggregate: {
            args: Prisma.StyleProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStyleProfile>
          }
          groupBy: {
            args: Prisma.StyleProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<StyleProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.StyleProfileCountArgs<ExtArgs>
            result: $Utils.Optional<StyleProfileCountAggregateOutputType> | number
          }
        }
      }
      PageIdea: {
        payload: Prisma.$PageIdeaPayload<ExtArgs>
        fields: Prisma.PageIdeaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageIdeaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageIdeaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          findFirst: {
            args: Prisma.PageIdeaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageIdeaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          findMany: {
            args: Prisma.PageIdeaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>[]
          }
          create: {
            args: Prisma.PageIdeaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          createMany: {
            args: Prisma.PageIdeaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageIdeaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>[]
          }
          delete: {
            args: Prisma.PageIdeaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          update: {
            args: Prisma.PageIdeaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          deleteMany: {
            args: Prisma.PageIdeaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageIdeaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageIdeaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageIdeaPayload>
          }
          aggregate: {
            args: Prisma.PageIdeaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageIdea>
          }
          groupBy: {
            args: Prisma.PageIdeaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageIdeaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageIdeaCountArgs<ExtArgs>
            result: $Utils.Optional<PageIdeaCountAggregateOutputType> | number
          }
        }
      }
      PageImage: {
        payload: Prisma.$PageImagePayload<ExtArgs>
        fields: Prisma.PageImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          findFirst: {
            args: Prisma.PageImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          findMany: {
            args: Prisma.PageImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>[]
          }
          create: {
            args: Prisma.PageImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          createMany: {
            args: Prisma.PageImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>[]
          }
          delete: {
            args: Prisma.PageImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          update: {
            args: Prisma.PageImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          deleteMany: {
            args: Prisma.PageImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageImagePayload>
          }
          aggregate: {
            args: Prisma.PageImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageImage>
          }
          groupBy: {
            args: Prisma.PageImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageImageCountArgs<ExtArgs>
            result: $Utils.Optional<PageImageCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    ideas: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ideas?: boolean | ProjectCountOutputTypeCountIdeasArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountIdeasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageIdeaWhereInput
  }


  /**
   * Count Type PageIdeaCountOutputType
   */

  export type PageIdeaCountOutputType = {
    images: number
  }

  export type PageIdeaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | PageIdeaCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * PageIdeaCountOutputType without action
   */
  export type PageIdeaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdeaCountOutputType
     */
    select?: PageIdeaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PageIdeaCountOutputType without action
   */
  export type PageIdeaCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageImageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    pagesRequested: number | null
  }

  export type ProjectSumAggregateOutputType = {
    pagesRequested: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    pagesRequested: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    pagesRequested: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    pagesRequested: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    pagesRequested?: true
  }

  export type ProjectSumAggregateInputType = {
    pagesRequested?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    pagesRequested?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    pagesRequested?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    pagesRequested?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    pagesRequested?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    styleProfile?: boolean | Project$styleProfileArgs<ExtArgs>
    ideas?: boolean | Project$ideasArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    pagesRequested?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    pagesRequested?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    styleProfile?: boolean | Project$styleProfileArgs<ExtArgs>
    ideas?: boolean | Project$ideasArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      styleProfile: Prisma.$StyleProfilePayload<ExtArgs> | null
      ideas: Prisma.$PageIdeaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      pagesRequested: number
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    styleProfile<T extends Project$styleProfileArgs<ExtArgs> = {}>(args?: Subset<T, Project$styleProfileArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ideas<T extends Project$ideasArgs<ExtArgs> = {}>(args?: Subset<T, Project$ideasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly userId: FieldRef<"Project", 'String'>
    readonly title: FieldRef<"Project", 'String'>
    readonly pagesRequested: FieldRef<"Project", 'Int'>
    readonly status: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.styleProfile
   */
  export type Project$styleProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    where?: StyleProfileWhereInput
  }

  /**
   * Project.ideas
   */
  export type Project$ideasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    where?: PageIdeaWhereInput
    orderBy?: PageIdeaOrderByWithRelationInput | PageIdeaOrderByWithRelationInput[]
    cursor?: PageIdeaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageIdeaScalarFieldEnum | PageIdeaScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model StyleProfile
   */

  export type AggregateStyleProfile = {
    _count: StyleProfileCountAggregateOutputType | null
    _min: StyleProfileMinAggregateOutputType | null
    _max: StyleProfileMaxAggregateOutputType | null
  }

  export type StyleProfileMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    stylePrompt: string | null
    seed: string | null
  }

  export type StyleProfileMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    stylePrompt: string | null
    seed: string | null
  }

  export type StyleProfileCountAggregateOutputType = {
    id: number
    projectId: number
    stylePrompt: number
    params: number
    seed: number
    characterRef: number
    _all: number
  }


  export type StyleProfileMinAggregateInputType = {
    id?: true
    projectId?: true
    stylePrompt?: true
    seed?: true
  }

  export type StyleProfileMaxAggregateInputType = {
    id?: true
    projectId?: true
    stylePrompt?: true
    seed?: true
  }

  export type StyleProfileCountAggregateInputType = {
    id?: true
    projectId?: true
    stylePrompt?: true
    params?: true
    seed?: true
    characterRef?: true
    _all?: true
  }

  export type StyleProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleProfile to aggregate.
     */
    where?: StyleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleProfiles to fetch.
     */
    orderBy?: StyleProfileOrderByWithRelationInput | StyleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StyleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StyleProfiles
    **/
    _count?: true | StyleProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StyleProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StyleProfileMaxAggregateInputType
  }

  export type GetStyleProfileAggregateType<T extends StyleProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateStyleProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStyleProfile[P]>
      : GetScalarType<T[P], AggregateStyleProfile[P]>
  }




  export type StyleProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StyleProfileWhereInput
    orderBy?: StyleProfileOrderByWithAggregationInput | StyleProfileOrderByWithAggregationInput[]
    by: StyleProfileScalarFieldEnum[] | StyleProfileScalarFieldEnum
    having?: StyleProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StyleProfileCountAggregateInputType | true
    _min?: StyleProfileMinAggregateInputType
    _max?: StyleProfileMaxAggregateInputType
  }

  export type StyleProfileGroupByOutputType = {
    id: string
    projectId: string
    stylePrompt: string
    params: JsonValue
    seed: string | null
    characterRef: JsonValue | null
    _count: StyleProfileCountAggregateOutputType | null
    _min: StyleProfileMinAggregateOutputType | null
    _max: StyleProfileMaxAggregateOutputType | null
  }

  type GetStyleProfileGroupByPayload<T extends StyleProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StyleProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StyleProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StyleProfileGroupByOutputType[P]>
            : GetScalarType<T[P], StyleProfileGroupByOutputType[P]>
        }
      >
    >


  export type StyleProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    stylePrompt?: boolean
    params?: boolean
    seed?: boolean
    characterRef?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleProfile"]>

  export type StyleProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    stylePrompt?: boolean
    params?: boolean
    seed?: boolean
    characterRef?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["styleProfile"]>

  export type StyleProfileSelectScalar = {
    id?: boolean
    projectId?: boolean
    stylePrompt?: boolean
    params?: boolean
    seed?: boolean
    characterRef?: boolean
  }

  export type StyleProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type StyleProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $StyleProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StyleProfile"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      stylePrompt: string
      params: Prisma.JsonValue
      seed: string | null
      characterRef: Prisma.JsonValue | null
    }, ExtArgs["result"]["styleProfile"]>
    composites: {}
  }

  type StyleProfileGetPayload<S extends boolean | null | undefined | StyleProfileDefaultArgs> = $Result.GetResult<Prisma.$StyleProfilePayload, S>

  type StyleProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StyleProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StyleProfileCountAggregateInputType | true
    }

  export interface StyleProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StyleProfile'], meta: { name: 'StyleProfile' } }
    /**
     * Find zero or one StyleProfile that matches the filter.
     * @param {StyleProfileFindUniqueArgs} args - Arguments to find a StyleProfile
     * @example
     * // Get one StyleProfile
     * const styleProfile = await prisma.styleProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StyleProfileFindUniqueArgs>(args: SelectSubset<T, StyleProfileFindUniqueArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StyleProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StyleProfileFindUniqueOrThrowArgs} args - Arguments to find a StyleProfile
     * @example
     * // Get one StyleProfile
     * const styleProfile = await prisma.styleProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StyleProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, StyleProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StyleProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileFindFirstArgs} args - Arguments to find a StyleProfile
     * @example
     * // Get one StyleProfile
     * const styleProfile = await prisma.styleProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StyleProfileFindFirstArgs>(args?: SelectSubset<T, StyleProfileFindFirstArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StyleProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileFindFirstOrThrowArgs} args - Arguments to find a StyleProfile
     * @example
     * // Get one StyleProfile
     * const styleProfile = await prisma.styleProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StyleProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, StyleProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StyleProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StyleProfiles
     * const styleProfiles = await prisma.styleProfile.findMany()
     * 
     * // Get first 10 StyleProfiles
     * const styleProfiles = await prisma.styleProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const styleProfileWithIdOnly = await prisma.styleProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StyleProfileFindManyArgs>(args?: SelectSubset<T, StyleProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StyleProfile.
     * @param {StyleProfileCreateArgs} args - Arguments to create a StyleProfile.
     * @example
     * // Create one StyleProfile
     * const StyleProfile = await prisma.styleProfile.create({
     *   data: {
     *     // ... data to create a StyleProfile
     *   }
     * })
     * 
     */
    create<T extends StyleProfileCreateArgs>(args: SelectSubset<T, StyleProfileCreateArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StyleProfiles.
     * @param {StyleProfileCreateManyArgs} args - Arguments to create many StyleProfiles.
     * @example
     * // Create many StyleProfiles
     * const styleProfile = await prisma.styleProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StyleProfileCreateManyArgs>(args?: SelectSubset<T, StyleProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StyleProfiles and returns the data saved in the database.
     * @param {StyleProfileCreateManyAndReturnArgs} args - Arguments to create many StyleProfiles.
     * @example
     * // Create many StyleProfiles
     * const styleProfile = await prisma.styleProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StyleProfiles and only return the `id`
     * const styleProfileWithIdOnly = await prisma.styleProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StyleProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, StyleProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StyleProfile.
     * @param {StyleProfileDeleteArgs} args - Arguments to delete one StyleProfile.
     * @example
     * // Delete one StyleProfile
     * const StyleProfile = await prisma.styleProfile.delete({
     *   where: {
     *     // ... filter to delete one StyleProfile
     *   }
     * })
     * 
     */
    delete<T extends StyleProfileDeleteArgs>(args: SelectSubset<T, StyleProfileDeleteArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StyleProfile.
     * @param {StyleProfileUpdateArgs} args - Arguments to update one StyleProfile.
     * @example
     * // Update one StyleProfile
     * const styleProfile = await prisma.styleProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StyleProfileUpdateArgs>(args: SelectSubset<T, StyleProfileUpdateArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StyleProfiles.
     * @param {StyleProfileDeleteManyArgs} args - Arguments to filter StyleProfiles to delete.
     * @example
     * // Delete a few StyleProfiles
     * const { count } = await prisma.styleProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StyleProfileDeleteManyArgs>(args?: SelectSubset<T, StyleProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StyleProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StyleProfiles
     * const styleProfile = await prisma.styleProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StyleProfileUpdateManyArgs>(args: SelectSubset<T, StyleProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StyleProfile.
     * @param {StyleProfileUpsertArgs} args - Arguments to update or create a StyleProfile.
     * @example
     * // Update or create a StyleProfile
     * const styleProfile = await prisma.styleProfile.upsert({
     *   create: {
     *     // ... data to create a StyleProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StyleProfile we want to update
     *   }
     * })
     */
    upsert<T extends StyleProfileUpsertArgs>(args: SelectSubset<T, StyleProfileUpsertArgs<ExtArgs>>): Prisma__StyleProfileClient<$Result.GetResult<Prisma.$StyleProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StyleProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileCountArgs} args - Arguments to filter StyleProfiles to count.
     * @example
     * // Count the number of StyleProfiles
     * const count = await prisma.styleProfile.count({
     *   where: {
     *     // ... the filter for the StyleProfiles we want to count
     *   }
     * })
    **/
    count<T extends StyleProfileCountArgs>(
      args?: Subset<T, StyleProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StyleProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StyleProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StyleProfileAggregateArgs>(args: Subset<T, StyleProfileAggregateArgs>): Prisma.PrismaPromise<GetStyleProfileAggregateType<T>>

    /**
     * Group by StyleProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StyleProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StyleProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StyleProfileGroupByArgs['orderBy'] }
        : { orderBy?: StyleProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StyleProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStyleProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StyleProfile model
   */
  readonly fields: StyleProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StyleProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StyleProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StyleProfile model
   */ 
  interface StyleProfileFieldRefs {
    readonly id: FieldRef<"StyleProfile", 'String'>
    readonly projectId: FieldRef<"StyleProfile", 'String'>
    readonly stylePrompt: FieldRef<"StyleProfile", 'String'>
    readonly params: FieldRef<"StyleProfile", 'Json'>
    readonly seed: FieldRef<"StyleProfile", 'String'>
    readonly characterRef: FieldRef<"StyleProfile", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * StyleProfile findUnique
   */
  export type StyleProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter, which StyleProfile to fetch.
     */
    where: StyleProfileWhereUniqueInput
  }

  /**
   * StyleProfile findUniqueOrThrow
   */
  export type StyleProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter, which StyleProfile to fetch.
     */
    where: StyleProfileWhereUniqueInput
  }

  /**
   * StyleProfile findFirst
   */
  export type StyleProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter, which StyleProfile to fetch.
     */
    where?: StyleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleProfiles to fetch.
     */
    orderBy?: StyleProfileOrderByWithRelationInput | StyleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleProfiles.
     */
    cursor?: StyleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleProfiles.
     */
    distinct?: StyleProfileScalarFieldEnum | StyleProfileScalarFieldEnum[]
  }

  /**
   * StyleProfile findFirstOrThrow
   */
  export type StyleProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter, which StyleProfile to fetch.
     */
    where?: StyleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleProfiles to fetch.
     */
    orderBy?: StyleProfileOrderByWithRelationInput | StyleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StyleProfiles.
     */
    cursor?: StyleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StyleProfiles.
     */
    distinct?: StyleProfileScalarFieldEnum | StyleProfileScalarFieldEnum[]
  }

  /**
   * StyleProfile findMany
   */
  export type StyleProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter, which StyleProfiles to fetch.
     */
    where?: StyleProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StyleProfiles to fetch.
     */
    orderBy?: StyleProfileOrderByWithRelationInput | StyleProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StyleProfiles.
     */
    cursor?: StyleProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StyleProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StyleProfiles.
     */
    skip?: number
    distinct?: StyleProfileScalarFieldEnum | StyleProfileScalarFieldEnum[]
  }

  /**
   * StyleProfile create
   */
  export type StyleProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a StyleProfile.
     */
    data: XOR<StyleProfileCreateInput, StyleProfileUncheckedCreateInput>
  }

  /**
   * StyleProfile createMany
   */
  export type StyleProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StyleProfiles.
     */
    data: StyleProfileCreateManyInput | StyleProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StyleProfile createManyAndReturn
   */
  export type StyleProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StyleProfiles.
     */
    data: StyleProfileCreateManyInput | StyleProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StyleProfile update
   */
  export type StyleProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a StyleProfile.
     */
    data: XOR<StyleProfileUpdateInput, StyleProfileUncheckedUpdateInput>
    /**
     * Choose, which StyleProfile to update.
     */
    where: StyleProfileWhereUniqueInput
  }

  /**
   * StyleProfile updateMany
   */
  export type StyleProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StyleProfiles.
     */
    data: XOR<StyleProfileUpdateManyMutationInput, StyleProfileUncheckedUpdateManyInput>
    /**
     * Filter which StyleProfiles to update
     */
    where?: StyleProfileWhereInput
  }

  /**
   * StyleProfile upsert
   */
  export type StyleProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the StyleProfile to update in case it exists.
     */
    where: StyleProfileWhereUniqueInput
    /**
     * In case the StyleProfile found by the `where` argument doesn't exist, create a new StyleProfile with this data.
     */
    create: XOR<StyleProfileCreateInput, StyleProfileUncheckedCreateInput>
    /**
     * In case the StyleProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StyleProfileUpdateInput, StyleProfileUncheckedUpdateInput>
  }

  /**
   * StyleProfile delete
   */
  export type StyleProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
    /**
     * Filter which StyleProfile to delete.
     */
    where: StyleProfileWhereUniqueInput
  }

  /**
   * StyleProfile deleteMany
   */
  export type StyleProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StyleProfiles to delete
     */
    where?: StyleProfileWhereInput
  }

  /**
   * StyleProfile without action
   */
  export type StyleProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StyleProfile
     */
    select?: StyleProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StyleProfileInclude<ExtArgs> | null
  }


  /**
   * Model PageIdea
   */

  export type AggregatePageIdea = {
    _count: PageIdeaCountAggregateOutputType | null
    _avg: PageIdeaAvgAggregateOutputType | null
    _sum: PageIdeaSumAggregateOutputType | null
    _min: PageIdeaMinAggregateOutputType | null
    _max: PageIdeaMaxAggregateOutputType | null
  }

  export type PageIdeaAvgAggregateOutputType = {
    index: number | null
  }

  export type PageIdeaSumAggregateOutputType = {
    index: number | null
  }

  export type PageIdeaMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    index: number | null
    ideaText: string | null
    status: string | null
  }

  export type PageIdeaMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    index: number | null
    ideaText: string | null
    status: string | null
  }

  export type PageIdeaCountAggregateOutputType = {
    id: number
    projectId: number
    index: number
    ideaText: number
    status: number
    _all: number
  }


  export type PageIdeaAvgAggregateInputType = {
    index?: true
  }

  export type PageIdeaSumAggregateInputType = {
    index?: true
  }

  export type PageIdeaMinAggregateInputType = {
    id?: true
    projectId?: true
    index?: true
    ideaText?: true
    status?: true
  }

  export type PageIdeaMaxAggregateInputType = {
    id?: true
    projectId?: true
    index?: true
    ideaText?: true
    status?: true
  }

  export type PageIdeaCountAggregateInputType = {
    id?: true
    projectId?: true
    index?: true
    ideaText?: true
    status?: true
    _all?: true
  }

  export type PageIdeaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageIdea to aggregate.
     */
    where?: PageIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageIdeas to fetch.
     */
    orderBy?: PageIdeaOrderByWithRelationInput | PageIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageIdeas
    **/
    _count?: true | PageIdeaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageIdeaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageIdeaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageIdeaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageIdeaMaxAggregateInputType
  }

  export type GetPageIdeaAggregateType<T extends PageIdeaAggregateArgs> = {
        [P in keyof T & keyof AggregatePageIdea]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageIdea[P]>
      : GetScalarType<T[P], AggregatePageIdea[P]>
  }




  export type PageIdeaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageIdeaWhereInput
    orderBy?: PageIdeaOrderByWithAggregationInput | PageIdeaOrderByWithAggregationInput[]
    by: PageIdeaScalarFieldEnum[] | PageIdeaScalarFieldEnum
    having?: PageIdeaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageIdeaCountAggregateInputType | true
    _avg?: PageIdeaAvgAggregateInputType
    _sum?: PageIdeaSumAggregateInputType
    _min?: PageIdeaMinAggregateInputType
    _max?: PageIdeaMaxAggregateInputType
  }

  export type PageIdeaGroupByOutputType = {
    id: string
    projectId: string
    index: number
    ideaText: string
    status: string
    _count: PageIdeaCountAggregateOutputType | null
    _avg: PageIdeaAvgAggregateOutputType | null
    _sum: PageIdeaSumAggregateOutputType | null
    _min: PageIdeaMinAggregateOutputType | null
    _max: PageIdeaMaxAggregateOutputType | null
  }

  type GetPageIdeaGroupByPayload<T extends PageIdeaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageIdeaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageIdeaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageIdeaGroupByOutputType[P]>
            : GetScalarType<T[P], PageIdeaGroupByOutputType[P]>
        }
      >
    >


  export type PageIdeaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    index?: boolean
    ideaText?: boolean
    status?: boolean
    images?: boolean | PageIdea$imagesArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | PageIdeaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageIdea"]>

  export type PageIdeaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    index?: boolean
    ideaText?: boolean
    status?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageIdea"]>

  export type PageIdeaSelectScalar = {
    id?: boolean
    projectId?: boolean
    index?: boolean
    ideaText?: boolean
    status?: boolean
  }

  export type PageIdeaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | PageIdea$imagesArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | PageIdeaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PageIdeaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $PageIdeaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PageIdea"
    objects: {
      images: Prisma.$PageImagePayload<ExtArgs>[]
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      index: number
      ideaText: string
      status: string
    }, ExtArgs["result"]["pageIdea"]>
    composites: {}
  }

  type PageIdeaGetPayload<S extends boolean | null | undefined | PageIdeaDefaultArgs> = $Result.GetResult<Prisma.$PageIdeaPayload, S>

  type PageIdeaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageIdeaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageIdeaCountAggregateInputType | true
    }

  export interface PageIdeaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageIdea'], meta: { name: 'PageIdea' } }
    /**
     * Find zero or one PageIdea that matches the filter.
     * @param {PageIdeaFindUniqueArgs} args - Arguments to find a PageIdea
     * @example
     * // Get one PageIdea
     * const pageIdea = await prisma.pageIdea.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageIdeaFindUniqueArgs>(args: SelectSubset<T, PageIdeaFindUniqueArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PageIdea that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageIdeaFindUniqueOrThrowArgs} args - Arguments to find a PageIdea
     * @example
     * // Get one PageIdea
     * const pageIdea = await prisma.pageIdea.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageIdeaFindUniqueOrThrowArgs>(args: SelectSubset<T, PageIdeaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PageIdea that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaFindFirstArgs} args - Arguments to find a PageIdea
     * @example
     * // Get one PageIdea
     * const pageIdea = await prisma.pageIdea.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageIdeaFindFirstArgs>(args?: SelectSubset<T, PageIdeaFindFirstArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PageIdea that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaFindFirstOrThrowArgs} args - Arguments to find a PageIdea
     * @example
     * // Get one PageIdea
     * const pageIdea = await prisma.pageIdea.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageIdeaFindFirstOrThrowArgs>(args?: SelectSubset<T, PageIdeaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PageIdeas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageIdeas
     * const pageIdeas = await prisma.pageIdea.findMany()
     * 
     * // Get first 10 PageIdeas
     * const pageIdeas = await prisma.pageIdea.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageIdeaWithIdOnly = await prisma.pageIdea.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageIdeaFindManyArgs>(args?: SelectSubset<T, PageIdeaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PageIdea.
     * @param {PageIdeaCreateArgs} args - Arguments to create a PageIdea.
     * @example
     * // Create one PageIdea
     * const PageIdea = await prisma.pageIdea.create({
     *   data: {
     *     // ... data to create a PageIdea
     *   }
     * })
     * 
     */
    create<T extends PageIdeaCreateArgs>(args: SelectSubset<T, PageIdeaCreateArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PageIdeas.
     * @param {PageIdeaCreateManyArgs} args - Arguments to create many PageIdeas.
     * @example
     * // Create many PageIdeas
     * const pageIdea = await prisma.pageIdea.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageIdeaCreateManyArgs>(args?: SelectSubset<T, PageIdeaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageIdeas and returns the data saved in the database.
     * @param {PageIdeaCreateManyAndReturnArgs} args - Arguments to create many PageIdeas.
     * @example
     * // Create many PageIdeas
     * const pageIdea = await prisma.pageIdea.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageIdeas and only return the `id`
     * const pageIdeaWithIdOnly = await prisma.pageIdea.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageIdeaCreateManyAndReturnArgs>(args?: SelectSubset<T, PageIdeaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PageIdea.
     * @param {PageIdeaDeleteArgs} args - Arguments to delete one PageIdea.
     * @example
     * // Delete one PageIdea
     * const PageIdea = await prisma.pageIdea.delete({
     *   where: {
     *     // ... filter to delete one PageIdea
     *   }
     * })
     * 
     */
    delete<T extends PageIdeaDeleteArgs>(args: SelectSubset<T, PageIdeaDeleteArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PageIdea.
     * @param {PageIdeaUpdateArgs} args - Arguments to update one PageIdea.
     * @example
     * // Update one PageIdea
     * const pageIdea = await prisma.pageIdea.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageIdeaUpdateArgs>(args: SelectSubset<T, PageIdeaUpdateArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PageIdeas.
     * @param {PageIdeaDeleteManyArgs} args - Arguments to filter PageIdeas to delete.
     * @example
     * // Delete a few PageIdeas
     * const { count } = await prisma.pageIdea.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageIdeaDeleteManyArgs>(args?: SelectSubset<T, PageIdeaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageIdeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageIdeas
     * const pageIdea = await prisma.pageIdea.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageIdeaUpdateManyArgs>(args: SelectSubset<T, PageIdeaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageIdea.
     * @param {PageIdeaUpsertArgs} args - Arguments to update or create a PageIdea.
     * @example
     * // Update or create a PageIdea
     * const pageIdea = await prisma.pageIdea.upsert({
     *   create: {
     *     // ... data to create a PageIdea
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageIdea we want to update
     *   }
     * })
     */
    upsert<T extends PageIdeaUpsertArgs>(args: SelectSubset<T, PageIdeaUpsertArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PageIdeas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaCountArgs} args - Arguments to filter PageIdeas to count.
     * @example
     * // Count the number of PageIdeas
     * const count = await prisma.pageIdea.count({
     *   where: {
     *     // ... the filter for the PageIdeas we want to count
     *   }
     * })
    **/
    count<T extends PageIdeaCountArgs>(
      args?: Subset<T, PageIdeaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageIdeaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageIdea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageIdeaAggregateArgs>(args: Subset<T, PageIdeaAggregateArgs>): Prisma.PrismaPromise<GetPageIdeaAggregateType<T>>

    /**
     * Group by PageIdea.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageIdeaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageIdeaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageIdeaGroupByArgs['orderBy'] }
        : { orderBy?: PageIdeaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageIdeaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageIdeaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PageIdea model
   */
  readonly fields: PageIdeaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PageIdea.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageIdeaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends PageIdea$imagesArgs<ExtArgs> = {}>(args?: Subset<T, PageIdea$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findMany"> | Null>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PageIdea model
   */ 
  interface PageIdeaFieldRefs {
    readonly id: FieldRef<"PageIdea", 'String'>
    readonly projectId: FieldRef<"PageIdea", 'String'>
    readonly index: FieldRef<"PageIdea", 'Int'>
    readonly ideaText: FieldRef<"PageIdea", 'String'>
    readonly status: FieldRef<"PageIdea", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PageIdea findUnique
   */
  export type PageIdeaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter, which PageIdea to fetch.
     */
    where: PageIdeaWhereUniqueInput
  }

  /**
   * PageIdea findUniqueOrThrow
   */
  export type PageIdeaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter, which PageIdea to fetch.
     */
    where: PageIdeaWhereUniqueInput
  }

  /**
   * PageIdea findFirst
   */
  export type PageIdeaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter, which PageIdea to fetch.
     */
    where?: PageIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageIdeas to fetch.
     */
    orderBy?: PageIdeaOrderByWithRelationInput | PageIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageIdeas.
     */
    cursor?: PageIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageIdeas.
     */
    distinct?: PageIdeaScalarFieldEnum | PageIdeaScalarFieldEnum[]
  }

  /**
   * PageIdea findFirstOrThrow
   */
  export type PageIdeaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter, which PageIdea to fetch.
     */
    where?: PageIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageIdeas to fetch.
     */
    orderBy?: PageIdeaOrderByWithRelationInput | PageIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageIdeas.
     */
    cursor?: PageIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageIdeas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageIdeas.
     */
    distinct?: PageIdeaScalarFieldEnum | PageIdeaScalarFieldEnum[]
  }

  /**
   * PageIdea findMany
   */
  export type PageIdeaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter, which PageIdeas to fetch.
     */
    where?: PageIdeaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageIdeas to fetch.
     */
    orderBy?: PageIdeaOrderByWithRelationInput | PageIdeaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageIdeas.
     */
    cursor?: PageIdeaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageIdeas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageIdeas.
     */
    skip?: number
    distinct?: PageIdeaScalarFieldEnum | PageIdeaScalarFieldEnum[]
  }

  /**
   * PageIdea create
   */
  export type PageIdeaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * The data needed to create a PageIdea.
     */
    data: XOR<PageIdeaCreateInput, PageIdeaUncheckedCreateInput>
  }

  /**
   * PageIdea createMany
   */
  export type PageIdeaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageIdeas.
     */
    data: PageIdeaCreateManyInput | PageIdeaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PageIdea createManyAndReturn
   */
  export type PageIdeaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PageIdeas.
     */
    data: PageIdeaCreateManyInput | PageIdeaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PageIdea update
   */
  export type PageIdeaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * The data needed to update a PageIdea.
     */
    data: XOR<PageIdeaUpdateInput, PageIdeaUncheckedUpdateInput>
    /**
     * Choose, which PageIdea to update.
     */
    where: PageIdeaWhereUniqueInput
  }

  /**
   * PageIdea updateMany
   */
  export type PageIdeaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageIdeas.
     */
    data: XOR<PageIdeaUpdateManyMutationInput, PageIdeaUncheckedUpdateManyInput>
    /**
     * Filter which PageIdeas to update
     */
    where?: PageIdeaWhereInput
  }

  /**
   * PageIdea upsert
   */
  export type PageIdeaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * The filter to search for the PageIdea to update in case it exists.
     */
    where: PageIdeaWhereUniqueInput
    /**
     * In case the PageIdea found by the `where` argument doesn't exist, create a new PageIdea with this data.
     */
    create: XOR<PageIdeaCreateInput, PageIdeaUncheckedCreateInput>
    /**
     * In case the PageIdea was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageIdeaUpdateInput, PageIdeaUncheckedUpdateInput>
  }

  /**
   * PageIdea delete
   */
  export type PageIdeaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
    /**
     * Filter which PageIdea to delete.
     */
    where: PageIdeaWhereUniqueInput
  }

  /**
   * PageIdea deleteMany
   */
  export type PageIdeaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageIdeas to delete
     */
    where?: PageIdeaWhereInput
  }

  /**
   * PageIdea.images
   */
  export type PageIdea$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    where?: PageImageWhereInput
    orderBy?: PageImageOrderByWithRelationInput | PageImageOrderByWithRelationInput[]
    cursor?: PageImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PageImageScalarFieldEnum | PageImageScalarFieldEnum[]
  }

  /**
   * PageIdea without action
   */
  export type PageIdeaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageIdea
     */
    select?: PageIdeaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageIdeaInclude<ExtArgs> | null
  }


  /**
   * Model PageImage
   */

  export type AggregatePageImage = {
    _count: PageImageCountAggregateOutputType | null
    _avg: PageImageAvgAggregateOutputType | null
    _sum: PageImageSumAggregateOutputType | null
    _min: PageImageMinAggregateOutputType | null
    _max: PageImageMaxAggregateOutputType | null
  }

  export type PageImageAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type PageImageSumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type PageImageMinAggregateOutputType = {
    id: string | null
    pageIdeaId: string | null
    stage: string | null
    url: string | null
    width: number | null
    height: number | null
  }

  export type PageImageMaxAggregateOutputType = {
    id: string | null
    pageIdeaId: string | null
    stage: string | null
    url: string | null
    width: number | null
    height: number | null
  }

  export type PageImageCountAggregateOutputType = {
    id: number
    pageIdeaId: number
    stage: number
    url: number
    width: number
    height: number
    meta: number
    _all: number
  }


  export type PageImageAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type PageImageSumAggregateInputType = {
    width?: true
    height?: true
  }

  export type PageImageMinAggregateInputType = {
    id?: true
    pageIdeaId?: true
    stage?: true
    url?: true
    width?: true
    height?: true
  }

  export type PageImageMaxAggregateInputType = {
    id?: true
    pageIdeaId?: true
    stage?: true
    url?: true
    width?: true
    height?: true
  }

  export type PageImageCountAggregateInputType = {
    id?: true
    pageIdeaId?: true
    stage?: true
    url?: true
    width?: true
    height?: true
    meta?: true
    _all?: true
  }

  export type PageImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageImage to aggregate.
     */
    where?: PageImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageImages to fetch.
     */
    orderBy?: PageImageOrderByWithRelationInput | PageImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageImages
    **/
    _count?: true | PageImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PageImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PageImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageImageMaxAggregateInputType
  }

  export type GetPageImageAggregateType<T extends PageImageAggregateArgs> = {
        [P in keyof T & keyof AggregatePageImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageImage[P]>
      : GetScalarType<T[P], AggregatePageImage[P]>
  }




  export type PageImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageImageWhereInput
    orderBy?: PageImageOrderByWithAggregationInput | PageImageOrderByWithAggregationInput[]
    by: PageImageScalarFieldEnum[] | PageImageScalarFieldEnum
    having?: PageImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageImageCountAggregateInputType | true
    _avg?: PageImageAvgAggregateInputType
    _sum?: PageImageSumAggregateInputType
    _min?: PageImageMinAggregateInputType
    _max?: PageImageMaxAggregateInputType
  }

  export type PageImageGroupByOutputType = {
    id: string
    pageIdeaId: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonValue
    _count: PageImageCountAggregateOutputType | null
    _avg: PageImageAvgAggregateOutputType | null
    _sum: PageImageSumAggregateOutputType | null
    _min: PageImageMinAggregateOutputType | null
    _max: PageImageMaxAggregateOutputType | null
  }

  type GetPageImageGroupByPayload<T extends PageImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageImageGroupByOutputType[P]>
            : GetScalarType<T[P], PageImageGroupByOutputType[P]>
        }
      >
    >


  export type PageImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageIdeaId?: boolean
    stage?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    meta?: boolean
    pageIdea?: boolean | PageIdeaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageImage"]>

  export type PageImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pageIdeaId?: boolean
    stage?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    meta?: boolean
    pageIdea?: boolean | PageIdeaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pageImage"]>

  export type PageImageSelectScalar = {
    id?: boolean
    pageIdeaId?: boolean
    stage?: boolean
    url?: boolean
    width?: boolean
    height?: boolean
    meta?: boolean
  }

  export type PageImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pageIdea?: boolean | PageIdeaDefaultArgs<ExtArgs>
  }
  export type PageImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pageIdea?: boolean | PageIdeaDefaultArgs<ExtArgs>
  }

  export type $PageImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PageImage"
    objects: {
      pageIdea: Prisma.$PageIdeaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      pageIdeaId: string
      stage: string
      url: string
      width: number
      height: number
      meta: Prisma.JsonValue
    }, ExtArgs["result"]["pageImage"]>
    composites: {}
  }

  type PageImageGetPayload<S extends boolean | null | undefined | PageImageDefaultArgs> = $Result.GetResult<Prisma.$PageImagePayload, S>

  type PageImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageImageCountAggregateInputType | true
    }

  export interface PageImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageImage'], meta: { name: 'PageImage' } }
    /**
     * Find zero or one PageImage that matches the filter.
     * @param {PageImageFindUniqueArgs} args - Arguments to find a PageImage
     * @example
     * // Get one PageImage
     * const pageImage = await prisma.pageImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageImageFindUniqueArgs>(args: SelectSubset<T, PageImageFindUniqueArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PageImage that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageImageFindUniqueOrThrowArgs} args - Arguments to find a PageImage
     * @example
     * // Get one PageImage
     * const pageImage = await prisma.pageImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageImageFindUniqueOrThrowArgs>(args: SelectSubset<T, PageImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PageImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageFindFirstArgs} args - Arguments to find a PageImage
     * @example
     * // Get one PageImage
     * const pageImage = await prisma.pageImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageImageFindFirstArgs>(args?: SelectSubset<T, PageImageFindFirstArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PageImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageFindFirstOrThrowArgs} args - Arguments to find a PageImage
     * @example
     * // Get one PageImage
     * const pageImage = await prisma.pageImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageImageFindFirstOrThrowArgs>(args?: SelectSubset<T, PageImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PageImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageImages
     * const pageImages = await prisma.pageImage.findMany()
     * 
     * // Get first 10 PageImages
     * const pageImages = await prisma.pageImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageImageWithIdOnly = await prisma.pageImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageImageFindManyArgs>(args?: SelectSubset<T, PageImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PageImage.
     * @param {PageImageCreateArgs} args - Arguments to create a PageImage.
     * @example
     * // Create one PageImage
     * const PageImage = await prisma.pageImage.create({
     *   data: {
     *     // ... data to create a PageImage
     *   }
     * })
     * 
     */
    create<T extends PageImageCreateArgs>(args: SelectSubset<T, PageImageCreateArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PageImages.
     * @param {PageImageCreateManyArgs} args - Arguments to create many PageImages.
     * @example
     * // Create many PageImages
     * const pageImage = await prisma.pageImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageImageCreateManyArgs>(args?: SelectSubset<T, PageImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageImages and returns the data saved in the database.
     * @param {PageImageCreateManyAndReturnArgs} args - Arguments to create many PageImages.
     * @example
     * // Create many PageImages
     * const pageImage = await prisma.pageImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageImages and only return the `id`
     * const pageImageWithIdOnly = await prisma.pageImage.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageImageCreateManyAndReturnArgs>(args?: SelectSubset<T, PageImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PageImage.
     * @param {PageImageDeleteArgs} args - Arguments to delete one PageImage.
     * @example
     * // Delete one PageImage
     * const PageImage = await prisma.pageImage.delete({
     *   where: {
     *     // ... filter to delete one PageImage
     *   }
     * })
     * 
     */
    delete<T extends PageImageDeleteArgs>(args: SelectSubset<T, PageImageDeleteArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PageImage.
     * @param {PageImageUpdateArgs} args - Arguments to update one PageImage.
     * @example
     * // Update one PageImage
     * const pageImage = await prisma.pageImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageImageUpdateArgs>(args: SelectSubset<T, PageImageUpdateArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PageImages.
     * @param {PageImageDeleteManyArgs} args - Arguments to filter PageImages to delete.
     * @example
     * // Delete a few PageImages
     * const { count } = await prisma.pageImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageImageDeleteManyArgs>(args?: SelectSubset<T, PageImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageImages
     * const pageImage = await prisma.pageImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageImageUpdateManyArgs>(args: SelectSubset<T, PageImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageImage.
     * @param {PageImageUpsertArgs} args - Arguments to update or create a PageImage.
     * @example
     * // Update or create a PageImage
     * const pageImage = await prisma.pageImage.upsert({
     *   create: {
     *     // ... data to create a PageImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageImage we want to update
     *   }
     * })
     */
    upsert<T extends PageImageUpsertArgs>(args: SelectSubset<T, PageImageUpsertArgs<ExtArgs>>): Prisma__PageImageClient<$Result.GetResult<Prisma.$PageImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PageImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageCountArgs} args - Arguments to filter PageImages to count.
     * @example
     * // Count the number of PageImages
     * const count = await prisma.pageImage.count({
     *   where: {
     *     // ... the filter for the PageImages we want to count
     *   }
     * })
    **/
    count<T extends PageImageCountArgs>(
      args?: Subset<T, PageImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageImageAggregateArgs>(args: Subset<T, PageImageAggregateArgs>): Prisma.PrismaPromise<GetPageImageAggregateType<T>>

    /**
     * Group by PageImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageImageGroupByArgs['orderBy'] }
        : { orderBy?: PageImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PageImage model
   */
  readonly fields: PageImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PageImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pageIdea<T extends PageIdeaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PageIdeaDefaultArgs<ExtArgs>>): Prisma__PageIdeaClient<$Result.GetResult<Prisma.$PageIdeaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PageImage model
   */ 
  interface PageImageFieldRefs {
    readonly id: FieldRef<"PageImage", 'String'>
    readonly pageIdeaId: FieldRef<"PageImage", 'String'>
    readonly stage: FieldRef<"PageImage", 'String'>
    readonly url: FieldRef<"PageImage", 'String'>
    readonly width: FieldRef<"PageImage", 'Int'>
    readonly height: FieldRef<"PageImage", 'Int'>
    readonly meta: FieldRef<"PageImage", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * PageImage findUnique
   */
  export type PageImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter, which PageImage to fetch.
     */
    where: PageImageWhereUniqueInput
  }

  /**
   * PageImage findUniqueOrThrow
   */
  export type PageImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter, which PageImage to fetch.
     */
    where: PageImageWhereUniqueInput
  }

  /**
   * PageImage findFirst
   */
  export type PageImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter, which PageImage to fetch.
     */
    where?: PageImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageImages to fetch.
     */
    orderBy?: PageImageOrderByWithRelationInput | PageImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageImages.
     */
    cursor?: PageImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageImages.
     */
    distinct?: PageImageScalarFieldEnum | PageImageScalarFieldEnum[]
  }

  /**
   * PageImage findFirstOrThrow
   */
  export type PageImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter, which PageImage to fetch.
     */
    where?: PageImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageImages to fetch.
     */
    orderBy?: PageImageOrderByWithRelationInput | PageImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageImages.
     */
    cursor?: PageImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageImages.
     */
    distinct?: PageImageScalarFieldEnum | PageImageScalarFieldEnum[]
  }

  /**
   * PageImage findMany
   */
  export type PageImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter, which PageImages to fetch.
     */
    where?: PageImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageImages to fetch.
     */
    orderBy?: PageImageOrderByWithRelationInput | PageImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageImages.
     */
    cursor?: PageImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageImages.
     */
    skip?: number
    distinct?: PageImageScalarFieldEnum | PageImageScalarFieldEnum[]
  }

  /**
   * PageImage create
   */
  export type PageImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * The data needed to create a PageImage.
     */
    data: XOR<PageImageCreateInput, PageImageUncheckedCreateInput>
  }

  /**
   * PageImage createMany
   */
  export type PageImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageImages.
     */
    data: PageImageCreateManyInput | PageImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PageImage createManyAndReturn
   */
  export type PageImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PageImages.
     */
    data: PageImageCreateManyInput | PageImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PageImage update
   */
  export type PageImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * The data needed to update a PageImage.
     */
    data: XOR<PageImageUpdateInput, PageImageUncheckedUpdateInput>
    /**
     * Choose, which PageImage to update.
     */
    where: PageImageWhereUniqueInput
  }

  /**
   * PageImage updateMany
   */
  export type PageImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageImages.
     */
    data: XOR<PageImageUpdateManyMutationInput, PageImageUncheckedUpdateManyInput>
    /**
     * Filter which PageImages to update
     */
    where?: PageImageWhereInput
  }

  /**
   * PageImage upsert
   */
  export type PageImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * The filter to search for the PageImage to update in case it exists.
     */
    where: PageImageWhereUniqueInput
    /**
     * In case the PageImage found by the `where` argument doesn't exist, create a new PageImage with this data.
     */
    create: XOR<PageImageCreateInput, PageImageUncheckedCreateInput>
    /**
     * In case the PageImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageImageUpdateInput, PageImageUncheckedUpdateInput>
  }

  /**
   * PageImage delete
   */
  export type PageImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
    /**
     * Filter which PageImage to delete.
     */
    where: PageImageWhereUniqueInput
  }

  /**
   * PageImage deleteMany
   */
  export type PageImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageImages to delete
     */
    where?: PageImageWhereInput
  }

  /**
   * PageImage without action
   */
  export type PageImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageImage
     */
    select?: PageImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PageImageInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    type: string | null
    projectId: string | null
    status: string | null
    errorText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    type: string | null
    projectId: string | null
    status: string | null
    errorText: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    type: number
    projectId: number
    payload: number
    status: number
    errorText: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobMinAggregateInputType = {
    id?: true
    type?: true
    projectId?: true
    status?: true
    errorText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    type?: true
    projectId?: true
    status?: true
    errorText?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    type?: true
    projectId?: true
    payload?: true
    status?: true
    errorText?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    type: string
    projectId: string
    payload: JsonValue
    status: string
    errorText: string | null
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    projectId?: boolean
    payload?: boolean
    status?: boolean
    errorText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    projectId?: boolean
    payload?: boolean
    status?: boolean
    errorText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    type?: boolean
    projectId?: boolean
    payload?: boolean
    status?: boolean
    errorText?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      projectId: string
      payload: Prisma.JsonValue
      status: string
      errorText: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */ 
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly type: FieldRef<"Job", 'String'>
    readonly projectId: FieldRef<"Job", 'String'>
    readonly payload: FieldRef<"Job", 'Json'>
    readonly status: FieldRef<"Job", 'String'>
    readonly errorText: FieldRef<"Job", 'String'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    pagesRequested: 'pagesRequested',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const StyleProfileScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    stylePrompt: 'stylePrompt',
    params: 'params',
    seed: 'seed',
    characterRef: 'characterRef'
  };

  export type StyleProfileScalarFieldEnum = (typeof StyleProfileScalarFieldEnum)[keyof typeof StyleProfileScalarFieldEnum]


  export const PageIdeaScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    index: 'index',
    ideaText: 'ideaText',
    status: 'status'
  };

  export type PageIdeaScalarFieldEnum = (typeof PageIdeaScalarFieldEnum)[keyof typeof PageIdeaScalarFieldEnum]


  export const PageImageScalarFieldEnum: {
    id: 'id',
    pageIdeaId: 'pageIdeaId',
    stage: 'stage',
    url: 'url',
    width: 'width',
    height: 'height',
    meta: 'meta'
  };

  export type PageImageScalarFieldEnum = (typeof PageImageScalarFieldEnum)[keyof typeof PageImageScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    type: 'type',
    projectId: 'projectId',
    payload: 'payload',
    status: 'status',
    errorText: 'errorText',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    userId?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    pagesRequested?: IntFilter<"Project"> | number
    status?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    styleProfile?: XOR<StyleProfileNullableRelationFilter, StyleProfileWhereInput> | null
    ideas?: PageIdeaListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    pagesRequested?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    styleProfile?: StyleProfileOrderByWithRelationInput
    ideas?: PageIdeaOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    userId?: StringFilter<"Project"> | string
    title?: StringFilter<"Project"> | string
    pagesRequested?: IntFilter<"Project"> | number
    status?: StringFilter<"Project"> | string
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    styleProfile?: XOR<StyleProfileNullableRelationFilter, StyleProfileWhereInput> | null
    ideas?: PageIdeaListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    pagesRequested?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    userId?: StringWithAggregatesFilter<"Project"> | string
    title?: StringWithAggregatesFilter<"Project"> | string
    pagesRequested?: IntWithAggregatesFilter<"Project"> | number
    status?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
  }

  export type StyleProfileWhereInput = {
    AND?: StyleProfileWhereInput | StyleProfileWhereInput[]
    OR?: StyleProfileWhereInput[]
    NOT?: StyleProfileWhereInput | StyleProfileWhereInput[]
    id?: StringFilter<"StyleProfile"> | string
    projectId?: StringFilter<"StyleProfile"> | string
    stylePrompt?: StringFilter<"StyleProfile"> | string
    params?: JsonFilter<"StyleProfile">
    seed?: StringNullableFilter<"StyleProfile"> | string | null
    characterRef?: JsonNullableFilter<"StyleProfile">
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type StyleProfileOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    stylePrompt?: SortOrder
    params?: SortOrder
    seed?: SortOrderInput | SortOrder
    characterRef?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type StyleProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId?: string
    AND?: StyleProfileWhereInput | StyleProfileWhereInput[]
    OR?: StyleProfileWhereInput[]
    NOT?: StyleProfileWhereInput | StyleProfileWhereInput[]
    stylePrompt?: StringFilter<"StyleProfile"> | string
    params?: JsonFilter<"StyleProfile">
    seed?: StringNullableFilter<"StyleProfile"> | string | null
    characterRef?: JsonNullableFilter<"StyleProfile">
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id" | "projectId">

  export type StyleProfileOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    stylePrompt?: SortOrder
    params?: SortOrder
    seed?: SortOrderInput | SortOrder
    characterRef?: SortOrderInput | SortOrder
    _count?: StyleProfileCountOrderByAggregateInput
    _max?: StyleProfileMaxOrderByAggregateInput
    _min?: StyleProfileMinOrderByAggregateInput
  }

  export type StyleProfileScalarWhereWithAggregatesInput = {
    AND?: StyleProfileScalarWhereWithAggregatesInput | StyleProfileScalarWhereWithAggregatesInput[]
    OR?: StyleProfileScalarWhereWithAggregatesInput[]
    NOT?: StyleProfileScalarWhereWithAggregatesInput | StyleProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StyleProfile"> | string
    projectId?: StringWithAggregatesFilter<"StyleProfile"> | string
    stylePrompt?: StringWithAggregatesFilter<"StyleProfile"> | string
    params?: JsonWithAggregatesFilter<"StyleProfile">
    seed?: StringNullableWithAggregatesFilter<"StyleProfile"> | string | null
    characterRef?: JsonNullableWithAggregatesFilter<"StyleProfile">
  }

  export type PageIdeaWhereInput = {
    AND?: PageIdeaWhereInput | PageIdeaWhereInput[]
    OR?: PageIdeaWhereInput[]
    NOT?: PageIdeaWhereInput | PageIdeaWhereInput[]
    id?: StringFilter<"PageIdea"> | string
    projectId?: StringFilter<"PageIdea"> | string
    index?: IntFilter<"PageIdea"> | number
    ideaText?: StringFilter<"PageIdea"> | string
    status?: StringFilter<"PageIdea"> | string
    images?: PageImageListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type PageIdeaOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    index?: SortOrder
    ideaText?: SortOrder
    status?: SortOrder
    images?: PageImageOrderByRelationAggregateInput
    project?: ProjectOrderByWithRelationInput
  }

  export type PageIdeaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageIdeaWhereInput | PageIdeaWhereInput[]
    OR?: PageIdeaWhereInput[]
    NOT?: PageIdeaWhereInput | PageIdeaWhereInput[]
    projectId?: StringFilter<"PageIdea"> | string
    index?: IntFilter<"PageIdea"> | number
    ideaText?: StringFilter<"PageIdea"> | string
    status?: StringFilter<"PageIdea"> | string
    images?: PageImageListRelationFilter
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id">

  export type PageIdeaOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    index?: SortOrder
    ideaText?: SortOrder
    status?: SortOrder
    _count?: PageIdeaCountOrderByAggregateInput
    _avg?: PageIdeaAvgOrderByAggregateInput
    _max?: PageIdeaMaxOrderByAggregateInput
    _min?: PageIdeaMinOrderByAggregateInput
    _sum?: PageIdeaSumOrderByAggregateInput
  }

  export type PageIdeaScalarWhereWithAggregatesInput = {
    AND?: PageIdeaScalarWhereWithAggregatesInput | PageIdeaScalarWhereWithAggregatesInput[]
    OR?: PageIdeaScalarWhereWithAggregatesInput[]
    NOT?: PageIdeaScalarWhereWithAggregatesInput | PageIdeaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PageIdea"> | string
    projectId?: StringWithAggregatesFilter<"PageIdea"> | string
    index?: IntWithAggregatesFilter<"PageIdea"> | number
    ideaText?: StringWithAggregatesFilter<"PageIdea"> | string
    status?: StringWithAggregatesFilter<"PageIdea"> | string
  }

  export type PageImageWhereInput = {
    AND?: PageImageWhereInput | PageImageWhereInput[]
    OR?: PageImageWhereInput[]
    NOT?: PageImageWhereInput | PageImageWhereInput[]
    id?: StringFilter<"PageImage"> | string
    pageIdeaId?: StringFilter<"PageImage"> | string
    stage?: StringFilter<"PageImage"> | string
    url?: StringFilter<"PageImage"> | string
    width?: IntFilter<"PageImage"> | number
    height?: IntFilter<"PageImage"> | number
    meta?: JsonFilter<"PageImage">
    pageIdea?: XOR<PageIdeaRelationFilter, PageIdeaWhereInput>
  }

  export type PageImageOrderByWithRelationInput = {
    id?: SortOrder
    pageIdeaId?: SortOrder
    stage?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    meta?: SortOrder
    pageIdea?: PageIdeaOrderByWithRelationInput
  }

  export type PageImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageImageWhereInput | PageImageWhereInput[]
    OR?: PageImageWhereInput[]
    NOT?: PageImageWhereInput | PageImageWhereInput[]
    pageIdeaId?: StringFilter<"PageImage"> | string
    stage?: StringFilter<"PageImage"> | string
    url?: StringFilter<"PageImage"> | string
    width?: IntFilter<"PageImage"> | number
    height?: IntFilter<"PageImage"> | number
    meta?: JsonFilter<"PageImage">
    pageIdea?: XOR<PageIdeaRelationFilter, PageIdeaWhereInput>
  }, "id">

  export type PageImageOrderByWithAggregationInput = {
    id?: SortOrder
    pageIdeaId?: SortOrder
    stage?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    meta?: SortOrder
    _count?: PageImageCountOrderByAggregateInput
    _avg?: PageImageAvgOrderByAggregateInput
    _max?: PageImageMaxOrderByAggregateInput
    _min?: PageImageMinOrderByAggregateInput
    _sum?: PageImageSumOrderByAggregateInput
  }

  export type PageImageScalarWhereWithAggregatesInput = {
    AND?: PageImageScalarWhereWithAggregatesInput | PageImageScalarWhereWithAggregatesInput[]
    OR?: PageImageScalarWhereWithAggregatesInput[]
    NOT?: PageImageScalarWhereWithAggregatesInput | PageImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PageImage"> | string
    pageIdeaId?: StringWithAggregatesFilter<"PageImage"> | string
    stage?: StringWithAggregatesFilter<"PageImage"> | string
    url?: StringWithAggregatesFilter<"PageImage"> | string
    width?: IntWithAggregatesFilter<"PageImage"> | number
    height?: IntWithAggregatesFilter<"PageImage"> | number
    meta?: JsonWithAggregatesFilter<"PageImage">
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    type?: StringFilter<"Job"> | string
    projectId?: StringFilter<"Job"> | string
    payload?: JsonFilter<"Job">
    status?: StringFilter<"Job"> | string
    errorText?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    errorText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    type?: StringFilter<"Job"> | string
    projectId?: StringFilter<"Job"> | string
    payload?: JsonFilter<"Job">
    status?: StringFilter<"Job"> | string
    errorText?: StringNullableFilter<"Job"> | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    errorText?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    type?: StringWithAggregatesFilter<"Job"> | string
    projectId?: StringWithAggregatesFilter<"Job"> | string
    payload?: JsonWithAggregatesFilter<"Job">
    status?: StringWithAggregatesFilter<"Job"> | string
    errorText?: StringNullableWithAggregatesFilter<"Job"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type ProjectCreateInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    styleProfile?: StyleProfileCreateNestedOneWithoutProjectInput
    ideas?: PageIdeaCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    styleProfile?: StyleProfileUncheckedCreateNestedOneWithoutProjectInput
    ideas?: PageIdeaUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleProfile?: StyleProfileUpdateOneWithoutProjectNestedInput
    ideas?: PageIdeaUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleProfile?: StyleProfileUncheckedUpdateOneWithoutProjectNestedInput
    ideas?: PageIdeaUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StyleProfileCreateInput = {
    id?: string
    stylePrompt: string
    params: JsonNullValueInput | InputJsonValue
    seed?: string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
    project: ProjectCreateNestedOneWithoutStyleProfileInput
  }

  export type StyleProfileUncheckedCreateInput = {
    id?: string
    projectId: string
    stylePrompt: string
    params: JsonNullValueInput | InputJsonValue
    seed?: string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
    project?: ProjectUpdateOneRequiredWithoutStyleProfileNestedInput
  }

  export type StyleProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileCreateManyInput = {
    id?: string
    projectId: string
    stylePrompt: string
    params: JsonNullValueInput | InputJsonValue
    seed?: string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PageIdeaCreateInput = {
    id?: string
    index: number
    ideaText: string
    status: string
    images?: PageImageCreateNestedManyWithoutPageIdeaInput
    project: ProjectCreateNestedOneWithoutIdeasInput
  }

  export type PageIdeaUncheckedCreateInput = {
    id?: string
    projectId: string
    index: number
    ideaText: string
    status: string
    images?: PageImageUncheckedCreateNestedManyWithoutPageIdeaInput
  }

  export type PageIdeaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    images?: PageImageUpdateManyWithoutPageIdeaNestedInput
    project?: ProjectUpdateOneRequiredWithoutIdeasNestedInput
  }

  export type PageIdeaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    images?: PageImageUncheckedUpdateManyWithoutPageIdeaNestedInput
  }

  export type PageIdeaCreateManyInput = {
    id?: string
    projectId: string
    index: number
    ideaText: string
    status: string
  }

  export type PageIdeaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PageIdeaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PageImageCreateInput = {
    id?: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
    pageIdea: PageIdeaCreateNestedOneWithoutImagesInput
  }

  export type PageImageUncheckedCreateInput = {
    id?: string
    pageIdeaId: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
    pageIdea?: PageIdeaUpdateOneRequiredWithoutImagesNestedInput
  }

  export type PageImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageIdeaId?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }

  export type PageImageCreateManyInput = {
    id?: string
    pageIdeaId: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pageIdeaId?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }

  export type JobCreateInput = {
    id?: string
    type: string
    projectId: string
    payload: JsonNullValueInput | InputJsonValue
    status: string
    errorText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUncheckedCreateInput = {
    id?: string
    type: string
    projectId: string
    payload: JsonNullValueInput | InputJsonValue
    status: string
    errorText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyInput = {
    id?: string
    type: string
    projectId: string
    payload: JsonNullValueInput | InputJsonValue
    status: string
    errorText?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    payload?: JsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    errorText?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StyleProfileNullableRelationFilter = {
    is?: StyleProfileWhereInput | null
    isNot?: StyleProfileWhereInput | null
  }

  export type PageIdeaListRelationFilter = {
    every?: PageIdeaWhereInput
    some?: PageIdeaWhereInput
    none?: PageIdeaWhereInput
  }

  export type PageIdeaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    pagesRequested?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    pagesRequested?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    pagesRequested?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    pagesRequested?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    pagesRequested?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StyleProfileCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    stylePrompt?: SortOrder
    params?: SortOrder
    seed?: SortOrder
    characterRef?: SortOrder
  }

  export type StyleProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    stylePrompt?: SortOrder
    seed?: SortOrder
  }

  export type StyleProfileMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    stylePrompt?: SortOrder
    seed?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type PageImageListRelationFilter = {
    every?: PageImageWhereInput
    some?: PageImageWhereInput
    none?: PageImageWhereInput
  }

  export type PageImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PageIdeaCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    index?: SortOrder
    ideaText?: SortOrder
    status?: SortOrder
  }

  export type PageIdeaAvgOrderByAggregateInput = {
    index?: SortOrder
  }

  export type PageIdeaMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    index?: SortOrder
    ideaText?: SortOrder
    status?: SortOrder
  }

  export type PageIdeaMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    index?: SortOrder
    ideaText?: SortOrder
    status?: SortOrder
  }

  export type PageIdeaSumOrderByAggregateInput = {
    index?: SortOrder
  }

  export type PageIdeaRelationFilter = {
    is?: PageIdeaWhereInput
    isNot?: PageIdeaWhereInput
  }

  export type PageImageCountOrderByAggregateInput = {
    id?: SortOrder
    pageIdeaId?: SortOrder
    stage?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
    meta?: SortOrder
  }

  export type PageImageAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type PageImageMaxOrderByAggregateInput = {
    id?: SortOrder
    pageIdeaId?: SortOrder
    stage?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type PageImageMinOrderByAggregateInput = {
    id?: SortOrder
    pageIdeaId?: SortOrder
    stage?: SortOrder
    url?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type PageImageSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    payload?: SortOrder
    status?: SortOrder
    errorText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    errorText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    projectId?: SortOrder
    status?: SortOrder
    errorText?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StyleProfileCreateNestedOneWithoutProjectInput = {
    create?: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
    connectOrCreate?: StyleProfileCreateOrConnectWithoutProjectInput
    connect?: StyleProfileWhereUniqueInput
  }

  export type PageIdeaCreateNestedManyWithoutProjectInput = {
    create?: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput> | PageIdeaCreateWithoutProjectInput[] | PageIdeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PageIdeaCreateOrConnectWithoutProjectInput | PageIdeaCreateOrConnectWithoutProjectInput[]
    createMany?: PageIdeaCreateManyProjectInputEnvelope
    connect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
  }

  export type StyleProfileUncheckedCreateNestedOneWithoutProjectInput = {
    create?: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
    connectOrCreate?: StyleProfileCreateOrConnectWithoutProjectInput
    connect?: StyleProfileWhereUniqueInput
  }

  export type PageIdeaUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput> | PageIdeaCreateWithoutProjectInput[] | PageIdeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PageIdeaCreateOrConnectWithoutProjectInput | PageIdeaCreateOrConnectWithoutProjectInput[]
    createMany?: PageIdeaCreateManyProjectInputEnvelope
    connect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StyleProfileUpdateOneWithoutProjectNestedInput = {
    create?: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
    connectOrCreate?: StyleProfileCreateOrConnectWithoutProjectInput
    upsert?: StyleProfileUpsertWithoutProjectInput
    disconnect?: StyleProfileWhereInput | boolean
    delete?: StyleProfileWhereInput | boolean
    connect?: StyleProfileWhereUniqueInput
    update?: XOR<XOR<StyleProfileUpdateToOneWithWhereWithoutProjectInput, StyleProfileUpdateWithoutProjectInput>, StyleProfileUncheckedUpdateWithoutProjectInput>
  }

  export type PageIdeaUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput> | PageIdeaCreateWithoutProjectInput[] | PageIdeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PageIdeaCreateOrConnectWithoutProjectInput | PageIdeaCreateOrConnectWithoutProjectInput[]
    upsert?: PageIdeaUpsertWithWhereUniqueWithoutProjectInput | PageIdeaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PageIdeaCreateManyProjectInputEnvelope
    set?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    disconnect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    delete?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    connect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    update?: PageIdeaUpdateWithWhereUniqueWithoutProjectInput | PageIdeaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PageIdeaUpdateManyWithWhereWithoutProjectInput | PageIdeaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PageIdeaScalarWhereInput | PageIdeaScalarWhereInput[]
  }

  export type StyleProfileUncheckedUpdateOneWithoutProjectNestedInput = {
    create?: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
    connectOrCreate?: StyleProfileCreateOrConnectWithoutProjectInput
    upsert?: StyleProfileUpsertWithoutProjectInput
    disconnect?: StyleProfileWhereInput | boolean
    delete?: StyleProfileWhereInput | boolean
    connect?: StyleProfileWhereUniqueInput
    update?: XOR<XOR<StyleProfileUpdateToOneWithWhereWithoutProjectInput, StyleProfileUpdateWithoutProjectInput>, StyleProfileUncheckedUpdateWithoutProjectInput>
  }

  export type PageIdeaUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput> | PageIdeaCreateWithoutProjectInput[] | PageIdeaUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: PageIdeaCreateOrConnectWithoutProjectInput | PageIdeaCreateOrConnectWithoutProjectInput[]
    upsert?: PageIdeaUpsertWithWhereUniqueWithoutProjectInput | PageIdeaUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: PageIdeaCreateManyProjectInputEnvelope
    set?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    disconnect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    delete?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    connect?: PageIdeaWhereUniqueInput | PageIdeaWhereUniqueInput[]
    update?: PageIdeaUpdateWithWhereUniqueWithoutProjectInput | PageIdeaUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: PageIdeaUpdateManyWithWhereWithoutProjectInput | PageIdeaUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: PageIdeaScalarWhereInput | PageIdeaScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutStyleProfileInput = {
    create?: XOR<ProjectCreateWithoutStyleProfileInput, ProjectUncheckedCreateWithoutStyleProfileInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutStyleProfileInput
    connect?: ProjectWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProjectUpdateOneRequiredWithoutStyleProfileNestedInput = {
    create?: XOR<ProjectCreateWithoutStyleProfileInput, ProjectUncheckedCreateWithoutStyleProfileInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutStyleProfileInput
    upsert?: ProjectUpsertWithoutStyleProfileInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutStyleProfileInput, ProjectUpdateWithoutStyleProfileInput>, ProjectUncheckedUpdateWithoutStyleProfileInput>
  }

  export type PageImageCreateNestedManyWithoutPageIdeaInput = {
    create?: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput> | PageImageCreateWithoutPageIdeaInput[] | PageImageUncheckedCreateWithoutPageIdeaInput[]
    connectOrCreate?: PageImageCreateOrConnectWithoutPageIdeaInput | PageImageCreateOrConnectWithoutPageIdeaInput[]
    createMany?: PageImageCreateManyPageIdeaInputEnvelope
    connect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
  }

  export type ProjectCreateNestedOneWithoutIdeasInput = {
    create?: XOR<ProjectCreateWithoutIdeasInput, ProjectUncheckedCreateWithoutIdeasInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutIdeasInput
    connect?: ProjectWhereUniqueInput
  }

  export type PageImageUncheckedCreateNestedManyWithoutPageIdeaInput = {
    create?: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput> | PageImageCreateWithoutPageIdeaInput[] | PageImageUncheckedCreateWithoutPageIdeaInput[]
    connectOrCreate?: PageImageCreateOrConnectWithoutPageIdeaInput | PageImageCreateOrConnectWithoutPageIdeaInput[]
    createMany?: PageImageCreateManyPageIdeaInputEnvelope
    connect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
  }

  export type PageImageUpdateManyWithoutPageIdeaNestedInput = {
    create?: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput> | PageImageCreateWithoutPageIdeaInput[] | PageImageUncheckedCreateWithoutPageIdeaInput[]
    connectOrCreate?: PageImageCreateOrConnectWithoutPageIdeaInput | PageImageCreateOrConnectWithoutPageIdeaInput[]
    upsert?: PageImageUpsertWithWhereUniqueWithoutPageIdeaInput | PageImageUpsertWithWhereUniqueWithoutPageIdeaInput[]
    createMany?: PageImageCreateManyPageIdeaInputEnvelope
    set?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    disconnect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    delete?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    connect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    update?: PageImageUpdateWithWhereUniqueWithoutPageIdeaInput | PageImageUpdateWithWhereUniqueWithoutPageIdeaInput[]
    updateMany?: PageImageUpdateManyWithWhereWithoutPageIdeaInput | PageImageUpdateManyWithWhereWithoutPageIdeaInput[]
    deleteMany?: PageImageScalarWhereInput | PageImageScalarWhereInput[]
  }

  export type ProjectUpdateOneRequiredWithoutIdeasNestedInput = {
    create?: XOR<ProjectCreateWithoutIdeasInput, ProjectUncheckedCreateWithoutIdeasInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutIdeasInput
    upsert?: ProjectUpsertWithoutIdeasInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutIdeasInput, ProjectUpdateWithoutIdeasInput>, ProjectUncheckedUpdateWithoutIdeasInput>
  }

  export type PageImageUncheckedUpdateManyWithoutPageIdeaNestedInput = {
    create?: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput> | PageImageCreateWithoutPageIdeaInput[] | PageImageUncheckedCreateWithoutPageIdeaInput[]
    connectOrCreate?: PageImageCreateOrConnectWithoutPageIdeaInput | PageImageCreateOrConnectWithoutPageIdeaInput[]
    upsert?: PageImageUpsertWithWhereUniqueWithoutPageIdeaInput | PageImageUpsertWithWhereUniqueWithoutPageIdeaInput[]
    createMany?: PageImageCreateManyPageIdeaInputEnvelope
    set?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    disconnect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    delete?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    connect?: PageImageWhereUniqueInput | PageImageWhereUniqueInput[]
    update?: PageImageUpdateWithWhereUniqueWithoutPageIdeaInput | PageImageUpdateWithWhereUniqueWithoutPageIdeaInput[]
    updateMany?: PageImageUpdateManyWithWhereWithoutPageIdeaInput | PageImageUpdateManyWithWhereWithoutPageIdeaInput[]
    deleteMany?: PageImageScalarWhereInput | PageImageScalarWhereInput[]
  }

  export type PageIdeaCreateNestedOneWithoutImagesInput = {
    create?: XOR<PageIdeaCreateWithoutImagesInput, PageIdeaUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PageIdeaCreateOrConnectWithoutImagesInput
    connect?: PageIdeaWhereUniqueInput
  }

  export type PageIdeaUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<PageIdeaCreateWithoutImagesInput, PageIdeaUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PageIdeaCreateOrConnectWithoutImagesInput
    upsert?: PageIdeaUpsertWithoutImagesInput
    connect?: PageIdeaWhereUniqueInput
    update?: XOR<XOR<PageIdeaUpdateToOneWithWhereWithoutImagesInput, PageIdeaUpdateWithoutImagesInput>, PageIdeaUncheckedUpdateWithoutImagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type StyleProfileCreateWithoutProjectInput = {
    id?: string
    stylePrompt: string
    params: JsonNullValueInput | InputJsonValue
    seed?: string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileUncheckedCreateWithoutProjectInput = {
    id?: string
    stylePrompt: string
    params: JsonNullValueInput | InputJsonValue
    seed?: string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileCreateOrConnectWithoutProjectInput = {
    where: StyleProfileWhereUniqueInput
    create: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
  }

  export type PageIdeaCreateWithoutProjectInput = {
    id?: string
    index: number
    ideaText: string
    status: string
    images?: PageImageCreateNestedManyWithoutPageIdeaInput
  }

  export type PageIdeaUncheckedCreateWithoutProjectInput = {
    id?: string
    index: number
    ideaText: string
    status: string
    images?: PageImageUncheckedCreateNestedManyWithoutPageIdeaInput
  }

  export type PageIdeaCreateOrConnectWithoutProjectInput = {
    where: PageIdeaWhereUniqueInput
    create: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput>
  }

  export type PageIdeaCreateManyProjectInputEnvelope = {
    data: PageIdeaCreateManyProjectInput | PageIdeaCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type StyleProfileUpsertWithoutProjectInput = {
    update: XOR<StyleProfileUpdateWithoutProjectInput, StyleProfileUncheckedUpdateWithoutProjectInput>
    create: XOR<StyleProfileCreateWithoutProjectInput, StyleProfileUncheckedCreateWithoutProjectInput>
    where?: StyleProfileWhereInput
  }

  export type StyleProfileUpdateToOneWithWhereWithoutProjectInput = {
    where?: StyleProfileWhereInput
    data: XOR<StyleProfileUpdateWithoutProjectInput, StyleProfileUncheckedUpdateWithoutProjectInput>
  }

  export type StyleProfileUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type StyleProfileUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    stylePrompt?: StringFieldUpdateOperationsInput | string
    params?: JsonNullValueInput | InputJsonValue
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    characterRef?: NullableJsonNullValueInput | InputJsonValue
  }

  export type PageIdeaUpsertWithWhereUniqueWithoutProjectInput = {
    where: PageIdeaWhereUniqueInput
    update: XOR<PageIdeaUpdateWithoutProjectInput, PageIdeaUncheckedUpdateWithoutProjectInput>
    create: XOR<PageIdeaCreateWithoutProjectInput, PageIdeaUncheckedCreateWithoutProjectInput>
  }

  export type PageIdeaUpdateWithWhereUniqueWithoutProjectInput = {
    where: PageIdeaWhereUniqueInput
    data: XOR<PageIdeaUpdateWithoutProjectInput, PageIdeaUncheckedUpdateWithoutProjectInput>
  }

  export type PageIdeaUpdateManyWithWhereWithoutProjectInput = {
    where: PageIdeaScalarWhereInput
    data: XOR<PageIdeaUpdateManyMutationInput, PageIdeaUncheckedUpdateManyWithoutProjectInput>
  }

  export type PageIdeaScalarWhereInput = {
    AND?: PageIdeaScalarWhereInput | PageIdeaScalarWhereInput[]
    OR?: PageIdeaScalarWhereInput[]
    NOT?: PageIdeaScalarWhereInput | PageIdeaScalarWhereInput[]
    id?: StringFilter<"PageIdea"> | string
    projectId?: StringFilter<"PageIdea"> | string
    index?: IntFilter<"PageIdea"> | number
    ideaText?: StringFilter<"PageIdea"> | string
    status?: StringFilter<"PageIdea"> | string
  }

  export type ProjectCreateWithoutStyleProfileInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ideas?: PageIdeaCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutStyleProfileInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ideas?: PageIdeaUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutStyleProfileInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutStyleProfileInput, ProjectUncheckedCreateWithoutStyleProfileInput>
  }

  export type ProjectUpsertWithoutStyleProfileInput = {
    update: XOR<ProjectUpdateWithoutStyleProfileInput, ProjectUncheckedUpdateWithoutStyleProfileInput>
    create: XOR<ProjectCreateWithoutStyleProfileInput, ProjectUncheckedCreateWithoutStyleProfileInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutStyleProfileInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutStyleProfileInput, ProjectUncheckedUpdateWithoutStyleProfileInput>
  }

  export type ProjectUpdateWithoutStyleProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ideas?: PageIdeaUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutStyleProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ideas?: PageIdeaUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type PageImageCreateWithoutPageIdeaInput = {
    id?: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUncheckedCreateWithoutPageIdeaInput = {
    id?: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
  }

  export type PageImageCreateOrConnectWithoutPageIdeaInput = {
    where: PageImageWhereUniqueInput
    create: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput>
  }

  export type PageImageCreateManyPageIdeaInputEnvelope = {
    data: PageImageCreateManyPageIdeaInput | PageImageCreateManyPageIdeaInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutIdeasInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    styleProfile?: StyleProfileCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutIdeasInput = {
    id?: string
    userId: string
    title: string
    pagesRequested: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    styleProfile?: StyleProfileUncheckedCreateNestedOneWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutIdeasInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutIdeasInput, ProjectUncheckedCreateWithoutIdeasInput>
  }

  export type PageImageUpsertWithWhereUniqueWithoutPageIdeaInput = {
    where: PageImageWhereUniqueInput
    update: XOR<PageImageUpdateWithoutPageIdeaInput, PageImageUncheckedUpdateWithoutPageIdeaInput>
    create: XOR<PageImageCreateWithoutPageIdeaInput, PageImageUncheckedCreateWithoutPageIdeaInput>
  }

  export type PageImageUpdateWithWhereUniqueWithoutPageIdeaInput = {
    where: PageImageWhereUniqueInput
    data: XOR<PageImageUpdateWithoutPageIdeaInput, PageImageUncheckedUpdateWithoutPageIdeaInput>
  }

  export type PageImageUpdateManyWithWhereWithoutPageIdeaInput = {
    where: PageImageScalarWhereInput
    data: XOR<PageImageUpdateManyMutationInput, PageImageUncheckedUpdateManyWithoutPageIdeaInput>
  }

  export type PageImageScalarWhereInput = {
    AND?: PageImageScalarWhereInput | PageImageScalarWhereInput[]
    OR?: PageImageScalarWhereInput[]
    NOT?: PageImageScalarWhereInput | PageImageScalarWhereInput[]
    id?: StringFilter<"PageImage"> | string
    pageIdeaId?: StringFilter<"PageImage"> | string
    stage?: StringFilter<"PageImage"> | string
    url?: StringFilter<"PageImage"> | string
    width?: IntFilter<"PageImage"> | number
    height?: IntFilter<"PageImage"> | number
    meta?: JsonFilter<"PageImage">
  }

  export type ProjectUpsertWithoutIdeasInput = {
    update: XOR<ProjectUpdateWithoutIdeasInput, ProjectUncheckedUpdateWithoutIdeasInput>
    create: XOR<ProjectCreateWithoutIdeasInput, ProjectUncheckedCreateWithoutIdeasInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutIdeasInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutIdeasInput, ProjectUncheckedUpdateWithoutIdeasInput>
  }

  export type ProjectUpdateWithoutIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleProfile?: StyleProfileUpdateOneWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutIdeasInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    pagesRequested?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    styleProfile?: StyleProfileUncheckedUpdateOneWithoutProjectNestedInput
  }

  export type PageIdeaCreateWithoutImagesInput = {
    id?: string
    index: number
    ideaText: string
    status: string
    project: ProjectCreateNestedOneWithoutIdeasInput
  }

  export type PageIdeaUncheckedCreateWithoutImagesInput = {
    id?: string
    projectId: string
    index: number
    ideaText: string
    status: string
  }

  export type PageIdeaCreateOrConnectWithoutImagesInput = {
    where: PageIdeaWhereUniqueInput
    create: XOR<PageIdeaCreateWithoutImagesInput, PageIdeaUncheckedCreateWithoutImagesInput>
  }

  export type PageIdeaUpsertWithoutImagesInput = {
    update: XOR<PageIdeaUpdateWithoutImagesInput, PageIdeaUncheckedUpdateWithoutImagesInput>
    create: XOR<PageIdeaCreateWithoutImagesInput, PageIdeaUncheckedCreateWithoutImagesInput>
    where?: PageIdeaWhereInput
  }

  export type PageIdeaUpdateToOneWithWhereWithoutImagesInput = {
    where?: PageIdeaWhereInput
    data: XOR<PageIdeaUpdateWithoutImagesInput, PageIdeaUncheckedUpdateWithoutImagesInput>
  }

  export type PageIdeaUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutIdeasNestedInput
  }

  export type PageIdeaUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PageIdeaCreateManyProjectInput = {
    id?: string
    index: number
    ideaText: string
    status: string
  }

  export type PageIdeaUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    images?: PageImageUpdateManyWithoutPageIdeaNestedInput
  }

  export type PageIdeaUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    images?: PageImageUncheckedUpdateManyWithoutPageIdeaNestedInput
  }

  export type PageIdeaUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    index?: IntFieldUpdateOperationsInput | number
    ideaText?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type PageImageCreateManyPageIdeaInput = {
    id?: string
    stage: string
    url: string
    width: number
    height: number
    meta: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUpdateWithoutPageIdeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUncheckedUpdateWithoutPageIdeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }

  export type PageImageUncheckedUpdateManyWithoutPageIdeaInput = {
    id?: StringFieldUpdateOperationsInput | string
    stage?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    meta?: JsonNullValueInput | InputJsonValue
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageIdeaCountOutputTypeDefaultArgs instead
     */
    export type PageIdeaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageIdeaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StyleProfileDefaultArgs instead
     */
    export type StyleProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StyleProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageIdeaDefaultArgs instead
     */
    export type PageIdeaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageIdeaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageImageDefaultArgs instead
     */
    export type PageImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDefaultArgs instead
     */
    export type JobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}